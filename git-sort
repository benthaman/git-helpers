#!/usr/bin/python
# -*- coding: utf-8 -*-

from __future__ import print_function

import os
import os.path
import pygit2
import shelve
import subprocess
import sys

"""
cache
    heads[name]
        ref
    history[]
"""

head_names = [
    "origin/master",
    "net/master",
    "net-next/master",
]

if __name__ == "__main__":
    try:
        path = os.environ["GIT_DIR"]
    except KeyError:
        path = pygit2.discover_repository(os.getcwd())
    repo = pygit2.Repository(path)

    heads = {}
    for name in head_names:
        try:
            commit = repo.revparse_single(name)
        except KeyError:
            pass
        else:
            heads[name] = str(commit.id)
    if len(heads) == 0:
        raise Exception("Couldn't find any heads, edit the \"head_names\" variable.")

    cache = shelve.open(os.path.expanduser("~/.cache/git-sort"))
    try:
        c_heads = cache["heads"]
    except KeyError:
        c_heads = None

    if c_heads != heads:
        args = ["git", "log", "--topo-order", "--reverse", "--pretty=tformat:%H"]
        args.extend(heads.keys())
        sp = subprocess.Popen(args, stdout=subprocess.PIPE,
                              stderr=subprocess.STDOUT)

        history = [l.strip() for l in sp.stdout.readlines()]

        r = sp.communicate()
        
        if sp.returncode != 0:
            print("\n".join(history), file=sys.stderr)
            raise Exception("git log exited with an error")
        cache["heads"] = heads
        cache["history"] = history
    else:
        history = cache["history"]
    cache.close()
    
    lines = {}
    for line in sys.stdin.readlines():
        line = line.strip()
        commit = repo.revparse_single(line.split()[0])
        lines[str(commit.id)] = line

    for commit in history:
        line = lines.pop(commit, None)
        while line:
            print(line)
            line = lines.pop(commit, None)
